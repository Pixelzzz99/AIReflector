import { ItemView, WorkspaceLeaf, Modal, App, TFile, Notice, MarkdownView } from 'obsidian';
import { detectHelpType, getPromptForType } from '../enhanced-prompts';
import { SmartTagsAnalyzer } from '../analysis/SmartTagsAnalyzer';
import { SmartConnectionsAnalyzer } from '../analysis/SmartConnectionsAnalyzer';
import type AIReflectPlugin from '../main';

export const VIEW_TYPE_ADVICE = 'ai-reflect-advice-view';

interface AdviceData {
  prompt: string;
  response: string;
  persona: string;
  timestamp: number;
  tags: string[];
  emotionalTone: string;
  suggestions?: TFile[];
  sourceFile?: string;
  keyConcepts?: string[]; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
  contentType?: string;   // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
}

export class SmartAdviceView extends ItemView {
  private currentAdvice: AdviceData | null = null;
  private isLoading = false;
  private smartTags: SmartTagsAnalyzer;
  private smartConnections: SmartConnectionsAnalyzer;
  private serverUrl = 'http://localhost:8787/analyze';
  private lastAnalyzedFile: string | null = null;
  private buttonHandlers: Map<HTMLElement, () => void> = new Map();
  private plugin: AIReflectPlugin;

  constructor(leaf: WorkspaceLeaf, app: App, plugin: AIReflectPlugin) {
    super(leaf);
    this.plugin = plugin;
    this.smartTags = new SmartTagsAnalyzer();
    this.smartConnections = new SmartConnectionsAnalyzer(app);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–≤–Ω–µ (–∏–∑ main.ts)
  updateAdvice(advice: AdviceData) {
    console.log('üìù Updating advice from external source:', advice);
    this.currentAdvice = advice;
    this.lastAnalyzedFile = advice.sourceFile || null;
    this.isLoading = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    this.render();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  showLoading() {
    console.log('‚è≥ Showing loading state');
    this.isLoading = true;
    this.render();
  }

  getViewType(): string {
    return VIEW_TYPE_ADVICE;
  }

  getDisplayText(): string {
    return 'AI Reflect - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫';
  }

  getIcon(): string {
    return 'brain';
  }

  async onOpen() {
    console.log('üöÄ SmartAdviceView opened');
    
    // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    this.render();
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ main.ts
  }

  async onClose() {
    console.log('üëã SmartAdviceView closed');
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.buttonHandlers.clear();
  }

  private addButtonHandler(element: HTMLElement, handler: () => void) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const oldHandler = this.buttonHandlers.get(element);
    if (oldHandler) {
      element.removeEventListener('click', oldHandler);
    }
    
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    let isExecuting = false;
    const protectedHandler = async () => {
      if (isExecuting) {
        console.log('‚è≥ Button click ignored - already executing');
        return;
      }
      isExecuting = true;
      element.style.opacity = '0.6';
      element.style.pointerEvents = 'none';
      
      try {
        await handler();
      } finally {
        isExecuting = false;
        element.style.opacity = '1';
        element.style.pointerEvents = 'auto';
      }
    };
    
    this.buttonHandlers.set(element, protectedHandler);
    element.addEventListener('click', protectedHandler);
    element.style.cursor = 'pointer';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    element.addEventListener('mousedown', () => {
      if (!isExecuting) element.style.opacity = '0.8';
    });
    element.addEventListener('mouseup', () => {
      if (!isExecuting) element.style.opacity = '1';
    });
    element.addEventListener('mouseleave', () => {
      if (!isExecuting) element.style.opacity = '1';
    });
  }

  // –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è - –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ main.ts
  /*
  private async analyzeActiveNote() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf) {
      console.log('‚ùå No active leaf found');
      this.currentAdvice = null;
      this.render();
      return;
    }

    const view = activeLeaf.view;
    if (!(view instanceof MarkdownView)) {
      console.log('‚ùå Active view is not MarkdownView');
      this.currentAdvice = null;
      this.render();
      return;
    }

    const file = view.file;
    if (!file) {
      console.log('‚ùå No file in active view');
      this.currentAdvice = null;
      this.render();
      return;
    }

    // –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (this.lastAnalyzedFile === file.path && this.currentAdvice) {
      console.log('‚è≠Ô∏è File already analyzed:', file.path);
      return;
    }

    console.log('üìù Auto-analyzing note:', file.path);
    
    try {
      const content = await this.app.vault.read(file);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏
      if (!content.trim() || content.trim().length < 50) {
        console.log('‚è≠Ô∏è Skipping short or empty note');
        this.currentAdvice = {
          prompt: '–ó–∞–º–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è',
          response: '–≠—Ç–∞ –∑–∞–º–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞.',
          persona: 'info',
          timestamp: Date.now(),
          tags: [],
          emotionalTone: 'neutral',
          sourceFile: file.path
        };
        this.render();
        return;
      }

      await this.analyzeNote(file, content);
      this.lastAnalyzedFile = file.path;
      
    } catch (error) {
      console.error('‚ùå Error analyzing active note:', error);
      this.currentAdvice = {
        prompt: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        response: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–º–µ—Ç–∫–∏: ${error.message}`,
        persona: 'error',
        timestamp: Date.now(),
        tags: [],
        emotionalTone: 'neutral'
      };
      this.render();
    }
  }
  */

  /*
  private async analyzeNote(file: TFile, content: string) {
    this.isLoading = true;
    this.render();

    try {
      console.log('üéØ Starting note analysis for:', file.basename);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é —É–º–Ω—ã—Ö —Ç–µ–≥–æ–≤
      const contentAnalysis = this.smartTags.analyzeContent(content);
      console.log('üìä Content analysis:', contentAnalysis);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–º–æ—â–∏
      const helpType = detectHelpType(content);
      console.log('üé≠ Detected help type:', helpType);

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
      const suggestions = await this.smartConnections.getSuggestions(content, 3);
      console.log('üîó Connection suggestions:', suggestions.length);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç–∞—Ä–æ–º—É API /analyze (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
      const requestBody = {
        input: {
          system: `–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –¥–æ–±—Ä—ã–π –∫–æ—É—á; –∫—Ä–∞—Ç–∫–∏–π, –∏–∑–±–µ–≥–∞—é—â–∏–π –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤; –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π`,
          user: this.buildPromptForAnalysis(file, content, helpType, contentAnalysis)
        },
        model: "claude-3-5-sonnet-20241022", // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        temperature: 0.3
      };

      console.log('üöÄ Sending request to analyze endpoint');

      const response = await fetch(this.serverUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        throw new Error(`Server error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∞–ª–∏–∑–µ
      this.currentAdvice = {
        prompt: content.substring(0, 200) + (content.length > 200 ? '...' : ''),
        response: data.adviceMd,
        persona: helpType,
        timestamp: Date.now(),
        tags: contentAnalysis.suggestedTags,
        emotionalTone: contentAnalysis.emotionalTone.tone,
        suggestions: suggestions.map(s => s.file),
        sourceFile: file.path
      };

      console.log('‚úÖ Analysis completed successfully');

    } catch (error) {
      console.error('‚ùå Error analyzing note:', error);
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–º–µ—Ç–∫–∏: ${error.message}`;
      
      if (error.message.includes('–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω') || error.message.includes('–ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω')) {
        errorMessage = `üîÑ Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω\n\n‚è≥ –°–µ—Ä–≤–µ—Ä Anthropic –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2-5 –º–∏–Ω—É—Ç.\n\nüí° –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ —Ä–µ—à–∞–µ—Ç—Å—è —Å–∞–º–∞.`;
      } else if (error.message.includes('network') || error.message.includes('fetch')) {
        errorMessage = `üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ç–∏\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      this.currentAdvice = {
        prompt: '–ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–∫–∏',
        response: errorMessage,
        persona: 'error',
        timestamp: Date.now(),
        tags: [],
        emotionalTone: 'neutral'
      };
    } finally {
      this.isLoading = false;
      this.render();
    }
  }
  */

  private buildPromptForAnalysis(file: TFile, content: string, helpType: string, analysis: any): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º enhanced-prompts –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const prompt = getPromptForType(helpType as any, content);
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return prompt.user
      .replace('{noteTitle}', file.basename)
      .replace('{notePath}', file.path)
      .replace('{tags}', analysis.suggestedTags.join(', '))
      .replace('{goals}', '')
      .replace('{noteContent}', content);
  }

  private render() {
    const container = this.containerEl;
    container.empty();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.buttonHandlers.forEach((handler, element) => {
      element.removeEventListener('click', handler);
    });
    this.buttonHandlers.clear();
    
    container.addClass('ai-reflect-view');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞
    const headerEl = container.createDiv('advice-header');
    const titleEl = headerEl.createEl('h2', { 
      text: 'AI Reflect - –ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–∫–∏',
      cls: 'advice-title'
    });
    
    const statusEl = headerEl.createDiv('advice-status');
    if (this.isLoading) {
      statusEl.innerHTML = 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–º–µ—Ç–∫—É...';
      statusEl.addClass('loading');
    } else if (this.currentAdvice) {
      const persona = this.getPersonaIcon(this.currentAdvice.persona);
      statusEl.innerHTML = `${persona} ${this.getPersonaName(this.currentAdvice.persona)}`;
      statusEl.addClass('ready');
    } else {
      statusEl.innerHTML = 'üìù –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É üß† –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞';
      statusEl.addClass('idle');
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∑–∞–º–µ—Ç–∫–µ
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf && activeLeaf.view instanceof MarkdownView && activeLeaf.view.file) {
      const noteInfoEl = container.createDiv('note-info');
      noteInfoEl.innerHTML = `üìÑ <strong>${activeLeaf.view.file.basename}</strong>`;
      
      if (this.isLoading) {
        noteInfoEl.innerHTML += ` <span class="analysis-status-loading">üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...</span>`;
      } else if (this.currentAdvice && this.currentAdvice.sourceFile === activeLeaf.view.file.path) {
        noteInfoEl.innerHTML += ` <span class="analysis-status">‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞</span>`;
      } else {
        noteInfoEl.innerHTML += ` <span class="analysis-status-pending">‚è≥ –ì–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É</span>`;
      }
    } else {
      const noNoteEl = container.createDiv('no-note-info');
      noNoteEl.innerHTML = `üìù <span class="text-muted">–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É üß† –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</span>`;
    }

    // –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    const responseSection = container.createDiv('response-section');
    
    if (this.currentAdvice) {
      this.renderAdvice(responseSection, this.currentAdvice);
    } else if (!this.isLoading) {
      const placeholderEl = responseSection.createDiv('analysis-placeholder');
      placeholderEl.innerHTML = `
        <div class="placeholder-content">
          <h3>ü§ñ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É</h3>
          <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É üß† –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–º–µ—Ç–∫—É.</p>
          <p><strong>AI –æ–ø—Ä–µ–¥–µ–ª–∏—Ç:</strong></p>
          <ul>
            <li>üé≠ –ü–æ–¥—Ö–æ–¥—è—â—É—é –ø–µ—Ä—Å–æ–Ω—É (–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, —Ç—Ä–µ–Ω–µ—Ä, –ø—Å–∏—Ö–æ–ª–æ–≥, –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç)</li>
            <li>üè∑Ô∏è –£–º–Ω—ã–µ —Ç–µ–≥–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω</li>
            <li>üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</li>
            <li>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
          </ul>
          <p><em>üí° –°–æ–≤–µ—Ç: –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</em></p>
        </div>
      `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑
    if (this.currentAdvice && !this.isLoading) {
      const refreshButton = container.createEl('button', {
        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑',
        cls: 'advice-refresh-btn'
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      this.addButtonHandler(refreshButton, async () => {
        console.log('üîÑ Refresh button clicked');
        this.lastAnalyzedFile = null;
        this.showLoading(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–ª–∞–≥–∏–Ω–∞ –≤–º–µ—Å—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await this.plugin.analyzeActiveNote();
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç
    if (!this.currentAdvice && !this.isLoading) {
      const analyzeButton = container.createEl('button', {
        text: 'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
        cls: 'advice-analyze-btn mod-cta'
      });
      
      this.addButtonHandler(analyzeButton, async () => {
        console.log('üß† Manual analyze button clicked');
        this.showLoading(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–ª–∞–≥–∏–Ω–∞ –≤–º–µ—Å—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await this.plugin.analyzeActiveNote();
      });
    }
  }

  private getPersonaIcon(persona: string): string {
    const icons: Record<string, string> = {
      'mentor': 'üéØ',
      'coach': 'üí™',
      'psychologist': 'üßò',
      'business': 'üíº',
      'reflection': 'ü§î',
      'error': '‚ùå'
    };
    return icons[persona] || 'üí≠';
  }

  private getPersonaName(persona: string): string {
    const names: Record<string, string> = {
      'mentor': '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
      'coach': '–¢—Ä–µ–Ω–µ—Ä',
      'psychologist': '–ü—Å–∏—Ö–æ–ª–æ–≥',
      'business': '–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
      'reflection': '–†–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫',
      'error': '–û—à–∏–±–∫–∞'
    };
    return names[persona] || '–ü–æ–º–æ—â–Ω–∏–∫';
  }

  private renderAdvice(container: HTMLElement, advice: AdviceData) {
    container.empty();
    console.log('üé® Rendering advice for persona:', advice.persona);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–µ—Ä—Å–æ–Ω–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    const adviceHeader = container.createDiv('advice-response-header');
    const personaEl = adviceHeader.createEl('div', { cls: 'advice-persona' });
    
    const personaIcon = this.getPersonaIcon(advice.persona);
    const personaName = this.getPersonaName(advice.persona);
    personaEl.innerHTML = `${personaIcon} <strong>${personaName}</strong>`;
    
    const timeEl = adviceHeader.createEl('div', { 
      cls: 'advice-time',
      text: new Date(advice.timestamp).toLocaleString('ru-RU')
    });

    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∏ —Ç–µ–≥–∏
    const metaSection = container.createDiv('advice-meta');
    
    if (advice.emotionalTone) {
      const toneEl = metaSection.createDiv('emotional-tone');
      const toneIcon = this.getEmotionalIcon(advice.emotionalTone);
      toneEl.innerHTML = `${toneIcon} <span class="tone-${advice.emotionalTone}">${this.getEmotionalName(advice.emotionalTone)}</span>`;
    }

    if (advice.tags && advice.tags.length > 0) {
      const tagsEl = metaSection.createDiv('smart-tags');
      tagsEl.createEl('strong', { text: 'üè∑Ô∏è –£–º–Ω—ã–µ —Ç–µ–≥–∏: ' });
      advice.tags.slice(0, 5).forEach(tag => {
        const tagEl = tagsEl.createEl('span', { 
          cls: 'smart-tag',
          text: tag.replace(/-/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        });
      });
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (advice.keyConcepts && advice.keyConcepts.length > 0) {
      const conceptsEl = metaSection.createDiv('key-concepts');
      conceptsEl.createEl('strong', { text: 'üîë –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: ' });
      advice.keyConcepts.slice(0, 3).forEach(concept => {
        const conceptEl = conceptsEl.createEl('span', { 
          cls: 'key-concept',
          text: concept
        });
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–∫–∏
    const responseSection = container.createDiv('advice-response-section');
    responseSection.createEl('h4', { text: `${personaIcon} –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–≤–µ—Ç—ã:` });
    const responseEl = responseSection.createEl('div', { 
      cls: 'advice-response-text' 
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown –≤ –æ—Ç–≤–µ—Ç–µ
    responseEl.innerHTML = this.processMarkdown(advice.response);

    // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    if (advice.suggestions && advice.suggestions.length > 0) {
      const connectionsSection = container.createDiv('smart-connections');
      connectionsSection.createEl('h4', { text: 'üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:' });
      
      const connectionsList = connectionsSection.createEl('ul', { cls: 'connections-list' });
      advice.suggestions.slice(0, 3).forEach(file => {
        const listItem = connectionsList.createEl('li');
        const link = listItem.createEl('a', {
          text: file.basename,
          cls: 'internal-link'
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        this.addButtonHandler(link, () => {
          console.log('üîó Opening linked note:', file.basename);
          this.app.workspace.openLinkText(file.path, '', false);
        });
      });
    }

    // –î–µ–π—Å—Ç–≤–∏—è
    const actionsSection = container.createDiv('advice-actions');
    
    const saveButton = actionsSection.createEl('button', {
      text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É',
      cls: 'advice-action-btn save-btn'
    });

    const copyButton = actionsSection.createEl('button', {
      text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑',
      cls: 'advice-action-btn copy-btn'
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    this.addButtonHandler(saveButton, () => {
      console.log('üíæ Save button clicked');
      try {
        new SaveAdviceModal(this.app, advice).open();
      } catch (error) {
        console.error('Error opening save modal:', error);
        new Notice('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    });

    this.addButtonHandler(copyButton, async () => {
      console.log('üìã Copy button clicked');
      try {
        const textToCopy = this.formatAdviceForCopy(advice);
        await navigator.clipboard.writeText(textToCopy);
        new Notice('–ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      } catch (error) {
        console.error('Error copying to clipboard:', error);
        new Notice('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      }
    });
  }

  private getEmotionalIcon(tone: string): string {
    const icons: Record<string, string> = {
      'positive': 'üòä',
      'negative': 'üòü',
      'neutral': 'üòê'
    };
    return icons[tone] || 'üòê';
  }

  private getEmotionalName(tone: string): string {
    const names: Record<string, string> = {
      'positive': '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π',
      'negative': '–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
      'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω'
    };
    return names[tone] || '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
  }

  private processMarkdown(text: string): string {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>')
      .replace(/^/, '<p>')
      .replace(/$/, '</p>');
  }

  private formatAdviceForCopy(advice: AdviceData): string {
    const personaName = this.getPersonaName(advice.persona);
    const date = new Date(advice.timestamp).toLocaleString('ru-RU');
    
    let result = `# ${personaName} - –ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–∫–∏\n`;
    result += `*${date}*\n\n`;
    result += `**–ò—Å—Ç–æ—á–Ω–∏–∫:** ${advice.sourceFile}\n\n`;
    result += `## –ê–Ω–∞–ª–∏–∑:\n${advice.response}\n\n`;
    
    if (advice.tags.length > 0) {
      result += `**–¢–µ–≥–∏:** ${advice.tags.join(', ')}\n`;
    }
    
    result += `**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω:** ${this.getEmotionalName(advice.emotionalTone)}\n`;
    
    return result;
  }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
class SaveAdviceModal extends Modal {
  private advice: AdviceData;
  private selectedTags: Set<string> = new Set();

  constructor(app: App, advice: AdviceData) {
    super(app);
    this.advice = advice;
    this.selectedTags = new Set(advice.tags);
  }

  onOpen() {
    const { contentEl } = this;
    contentEl.empty();

    contentEl.createEl('h2', { text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–º–µ—Ç–∫—É' });

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    const previewSection = contentEl.createDiv('save-preview-section');
    previewSection.createEl('h3', { text: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:' });
    
    const previewEl = previewSection.createEl('div', { cls: 'save-preview' });
    previewEl.innerHTML = `
      <div class="preview-header">
        <strong>${this.getPersonaIcon(this.advice.persona)} ${this.getPersonaName(this.advice.persona)}</strong>
        <span class="preview-date">${new Date(this.advice.timestamp).toLocaleString('ru-RU')}</span>
      </div>
      <div class="preview-content">
        <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${this.advice.sourceFile}<br><br>
        <strong>–ê–Ω–∞–ª–∏–∑:</strong><br>
        ${this.advice.response.substring(0, 300).replace(/\n/g, '<br>')}...
      </div>
    `;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const optionsSection = contentEl.createDiv('save-options-section');
    
    const sourceFileName = this.advice.sourceFile?.split('/').pop()?.replace('.md', '') || '–ó–∞–º–µ—Ç–∫–∞';
    let fileName = `AI –ê–Ω–∞–ª–∏–∑ - ${sourceFileName} - ${new Date().toISOString().split('T')[0]}`;
    
    const fileNameInput = optionsSection.createEl('input', {
      type: 'text',
      value: fileName,
      placeholder: '–ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .md)'
    });
    
    fileNameInput.style.width = '100%';
    fileNameInput.style.padding = '8px';
    fileNameInput.style.marginBottom = '20px';
    fileNameInput.style.borderRadius = '4px';
    fileNameInput.style.border = '1px solid var(--background-modifier-border)';

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const buttonContainer = contentEl.createDiv('modal-buttons');
    
    const saveNewButton = buttonContainer.createEl('button', {
      text: 'üíæ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É',
      cls: 'mod-cta'
    });

    const cancelButton = buttonContainer.createEl('button', {
      text: '–û—Ç–º–µ–Ω–∞'
    });

    // –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    let isSaving = false;
    saveNewButton.onclick = async () => {
      if (isSaving) return;
      isSaving = true;
      
      saveNewButton.textContent = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
      saveNewButton.disabled = true;
      
      try {
        console.log('üíæ Modal save button clicked');
        const finalFileName = fileNameInput.value || fileName;
        await this.saveAsNewNote(finalFileName);
        this.close();
      } catch (error) {
        console.error('Error in save handler:', error);
        new Notice(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
      } finally {
        isSaving = false;
        saveNewButton.textContent = 'üíæ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É';
        saveNewButton.disabled = false;
      }
    };

    cancelButton.onclick = () => {
      console.log('‚ùå Modal cancel button clicked');
      this.close();
    };
  }

  private async saveAsNewNote(fileName: string) {
    try {
      const content = this.formatAdviceForSaving();
      const filePath = `${fileName}.md`;
      
      await this.app.vault.create(filePath, content);
      new Notice(`–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞–º–µ—Ç–∫—É: ${fileName}`);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof TFile) {
        await this.app.workspace.openLinkText(filePath, '', false);
      }
    } catch (error) {
      console.error('Error saving analysis:', error);
      new Notice(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
    }
  }

  private formatAdviceForSaving(): string {
    const personaName = this.getPersonaName(this.advice.persona);
    const date = new Date(this.advice.timestamp).toLocaleString('ru-RU');
    const basicTags = ['ai-–∞–Ω–∞–ª–∏–∑', '—Ä–µ—Ñ–ª–µ–∫—Å–∏—è', ...this.advice.tags.slice(0, 3)];
    const tags = basicTags.map(tag => `#${tag.replace(/\s+/g, '-')}`).join(' ');
    
    return `---
title: "AI –ê–Ω–∞–ª–∏–∑ - ${personaName}"
date: ${new Date().toISOString().split('T')[0]}
tags: [${basicTags.map(tag => `"${tag}"`).join(', ')}]
persona: ${this.advice.persona}
emotional_tone: ${this.advice.emotionalTone}
source_file: "${this.advice.sourceFile}"
---

# ${this.getPersonaIcon(this.advice.persona)} ${personaName} - –ê–Ω–∞–ª–∏–∑ –∑–∞–º–µ—Ç–∫–∏

${tags}

**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${date}  
**–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞:** [[${this.advice.sourceFile?.replace('.md', '')}]]

## ${this.getPersonaIcon(this.advice.persona)} –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${this.advice.response}

---

**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω:** ${this.getEmotionalName(this.advice.emotionalTone)}  
**AI-–ø–µ—Ä—Å–æ–Ω–∞:** ${personaName}

> –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI Reflect - —É–º–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.
`;
  }

  private getPersonaIcon(persona: string): string {
    const icons: Record<string, string> = {
      'mentor': 'üéØ',
      'coach': 'üí™',
      'psychologist': 'üßò',
      'business': 'üíº',
      'reflection': 'ü§î'
    };
    return icons[persona] || 'üí≠';
  }

  private getPersonaName(persona: string): string {
    const names: Record<string, string> = {
      'mentor': '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
      'coach': '–¢—Ä–µ–Ω–µ—Ä',
      'psychologist': '–ü—Å–∏—Ö–æ–ª–æ–≥',
      'business': '–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
      'reflection': '–†–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'
    };
    return names[persona] || '–ü–æ–º–æ—â–Ω–∏–∫';
  }

  private getEmotionalName(tone: string): string {
    const names: Record<string, string> = {
      'positive': '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π',
      'negative': '–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
      'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω'
    };
    return names[tone] || '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
  }

  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}
