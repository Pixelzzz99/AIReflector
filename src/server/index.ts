import Fastify from "fastify";
import cors from "@fastify/cors";
import type { FastifyRequest, FastifyReply } from "fastify";
import * as dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

interface AnalyzeBody {
  input: { system: string; user: string };
  model: string;
  temperature?: number;
  stream?: boolean;
}

interface AIResponse {
  adviceMd: string;
  score?: number;
  actions?: string[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenAI API
async function callOpenAI(
  messages: Array<{ role: string; content: string }>,
  model: string,
  temperature: number
): Promise<string> {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  const requestBody = {
    model,
    messages,
    temperature,
    max_tokens: 1500,
  };

  console.log('üöÄ OpenAI API Request:');
  console.log('Model:', model);
  console.log('Temperature:', temperature);
  console.log('Messages:', messages.map(m => ({ role: m.role, length: m.content.length })));
  console.log('Full request body:', JSON.stringify(requestBody, null, 2));

  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(requestBody),
  });

  console.log('üì° OpenAI API Response Status:', response.status);
  console.log('Response status text:', response.statusText);

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    console.error('‚ùå OpenAI API Error Response:', errorData);
    throw new Error(`OpenAI API Error: ${response.status} - ${errorData.error?.message || response.statusText}`);
  }

  const data = await response.json();
  console.log('‚úÖ OpenAI API Success Response:');
  console.log('Response structure:', Object.keys(data));
  console.log('Choices count:', data.choices?.length || 0);
  console.log('Content length:', data.choices?.[0]?.message?.content?.length || 0);
  console.log('Response content preview:', data.choices?.[0]?.message?.content?.substring(0, 300) + '...');
  
  return data.choices[0]?.message?.content || "";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Claude API
async function callClaude(
  messages: Array<{ role: string; content: string }>,
  model: string,
  temperature: number
): Promise<string> {
  const apiKey = process.env.CLAUDE_API_KEY || null;

  if (!apiKey) {
    throw new Error("CLAUDE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Claude API
  const systemMessage = messages.find(m => m.role === "system");
  const userMessages = messages.filter(m => m.role !== "system");
  
  const requestBody = {
    model,
    max_tokens: 1500,
    temperature,
    system: systemMessage?.content || "",
    messages: userMessages,
  };

  console.log('üöÄ Claude API Request:');
  console.log('Model:', model);
  console.log('Temperature:', temperature);
  console.log('System prompt:', systemMessage?.content?.substring(0, 100) + '...');
  console.log('User message:', userMessages[0]?.content?.substring(0, 200) + '...');
  console.log('Full request body:', JSON.stringify(requestBody, null, 2));
  
  const response = await fetch("https://api.anthropic.com/v1/messages", {
    method: "POST",
    headers: {
      "x-api-key": apiKey,
      "Content-Type": "application/json",
      "anthropic-version": "2023-06-01",
    },
    body: JSON.stringify(requestBody),
  });

  console.log('üì° Claude API Response Status:', response.status);
  console.log('Response status text:', response.statusText);

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    console.error('‚ùå Claude API Error Response:', errorData);
    throw new Error(`Claude API Error: ${response.status} - ${errorData.error?.message || response.statusText}`);
  }

  const data = await response.json();
  console.log('‚úÖ Claude API Success Response:');
  console.log('Response structure:', Object.keys(data));
  console.log('Content length:', data.content?.[0]?.text?.length || 0);
  console.log('Full response:', JSON.stringify(data, null, 2));
  console.log('Response text preview:', data.content?.[0]?.text?.substring(0, 300) + '...');
  
  return data.content[0]?.text || "";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
function parseAIResponse(content: string): AIResponse {
  const lines = content.split('\n');
  const actions: string[] = [];
  let score: number | undefined;

  // –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ bullet points –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö
  const actionRegex = /^[\s]*[-*]\s*(.+)|^\d+\.\s*(.+)/;
  
  for (const line of lines) {
    const match = line.match(actionRegex);
    if (match) {
      const action = (match[1] || match[2]).trim();
      if (action.length > 5 && action.length < 100) { // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω–µ
        actions.push(action);
      }
    }
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
  const scoreMatch = content.match(/(\d+)\/100|score[:\s]*(\d+)|(\d+)\s*%/i);
  if (scoreMatch) {
    const scoreStr = scoreMatch[1] || scoreMatch[2] || scoreMatch[3];
    const parsedScore = parseInt(scoreStr);
    if (parsedScore >= 0 && parsedScore <= 100) {
      score = parsedScore;
    }
  }

  return {
    adviceMd: content,
    score,
    actions: actions.slice(0, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –¥–µ–π—Å—Ç–≤–∏–π
  };
}

async function startServer() {
  console.log("–°–æ–∑–¥–∞–Ω–∏–µ Fastify —ç–∫–∑–µ–º–ø–ª—è—Ä–∞...");
  
  const fastify = Fastify({ 
    logger: true
  });

  console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CORS –ø–ª–∞–≥–∏–Ω–∞...");
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º CORS –ø–ª–∞–≥–∏–Ω
  await fastify.register(cors, {
    origin: true,
    credentials: true
  });

  console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...");

  fastify.post(
    "/analyze",
    async (req: FastifyRequest<{ Body: AnalyzeBody }>, reply: FastifyReply) => {
      try {
        const { input, model, temperature = 0.3 } = req.body;

        console.log('üì• Received analyze request:');
        console.log('Model:', model);
        console.log('Temperature:', temperature);
        console.log('System input length:', input?.system?.length || 0);
        console.log('User input length:', input?.user?.length || 0);
        console.log('System input preview:', input?.system?.substring(0, 100) + '...');
        console.log('User input preview:', input?.user?.substring(0, 200) + '...');

        if (!input || !input.system || !input.user) {
          console.log('‚ùå Missing required fields in request');
          return reply.status(400).send({
            error: "Missing required fields: input.system and input.user"
          });
        }

        const messages = [
          { role: "system", content: input.system },
          { role: "user", content: input.user }
        ];

        let aiResponse: string;
        
        console.log('ü§ñ Determining AI provider...');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏
        if (model.includes("claude") || model.includes("sonnet")) {
          console.log('üì° Using Claude API');
          aiResponse = await callClaude(messages, model, temperature);
        } else {
          console.log('üì° Using OpenAI API');
          aiResponse = await callOpenAI(messages, model, temperature);
        }
        
        console.log('‚úÖ AI Response received:');
        console.log('Response length:', aiResponse?.length || 0);
        console.log('Response preview:', aiResponse?.substring(0, 300) + '...');
        
        if (!aiResponse) {
          throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò");
        }

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        const parsedResponse = parseAIResponse(aiResponse);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üéØ Analysis completed:', {
          model,
          temperature,
          responseLength: aiResponse.length,
          actionsFound: parsedResponse.actions?.length || 0,
          score: parsedResponse.score
        });

        console.log('üì§ Sending response with parsed data');

        return reply.send(parsedResponse);

      } catch (error: any) {
        console.error('Error in /analyze endpoint:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        return reply.status(500).send({
          error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–º–µ—Ç–∫–∏",
          details: error.message,
          // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å stack trace
          ...(process.env.NODE_ENV !== 'production' && { stack: error.stack })
        });
      }
    }
  );

  // –ù–æ–≤—ã–π endpoint –¥–ª—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–≤–µ—Ç–æ–≤
  fastify.post<{
    Body: {
      message: string;
      helpType: 'mentor' | 'coach' | 'psychologist' | 'business' | 'reflection';
    };
  }>(
    "/api/advice",
    async (request: FastifyRequest<{ Body: { message: string; helpType: string } }>, reply: FastifyReply) => {
      console.log('üí¨ New advice request received');
      console.log('- Message length:', request.body.message.length);
      console.log('- Help type:', request.body.helpType);
      console.log('- Message preview:', request.body.message.substring(0, 100) + '...');
      
      try {
        const { message, helpType } = request.body;
        
        if (!message || !message.trim()) {
          return reply.status(400).send({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" });
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        const isRussian = /[–∞-—è—ë]/i.test(message);
        const language = isRussian ? 'ru' : 'en';
        console.log('- Detected language:', language);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏ –∏ —è–∑—ã–∫–∞
        const systemPrompts = {
          ru: {
            mentor: "–í—ã –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏. –î–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            coach: "–í—ã –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç—Ä–µ–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏. –§–æ–∫—É—Å–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            psychologist: "–í—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —ç–º–æ—Ü–∏–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. –°–æ–∑–¥–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            business: "–í—ã –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –î–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            reflection: "–í—ã –º—É–¥—Ä—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–∏—Ç—É–∞—Ü–∏–∏. –ó–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
          },
          en: {
            mentor: "You are an experienced mentor with years of expertise in professional development. You share practical advice and help develop skills. Respond in English.",
            coach: "You are a motivating coach who helps achieve goals and build beneficial habits. You focus on actions and results. Respond in English.",
            psychologist: "You are an empathetic psychologist who helps understand emotions, behavioral patterns, and internal processes. You create a safe space for reflection. Respond in English.",
            business: "You are an experienced business consultant with expertise in strategy, sales, and business development. You provide practical commercial advice. Respond in English.",
            reflection: "You are a wise assistant for self-reflection who helps understand yourself and situations more deeply. You ask the right questions. Respond in English."
          }
        };
        
        const systemPrompt = systemPrompts[language][helpType as keyof typeof systemPrompts['ru']] || systemPrompts[language].reflection;
        console.log('- Using system prompt for:', helpType, 'in', language);
        
        // –í—ã–∑—ã–≤–∞–µ–º Claude API
        const messages = [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ];
        
        const response = await callClaude(messages, "claude-3-5-sonnet-20241022", 0.7);
        
        console.log('‚úÖ Claude response received');
        console.log('- Response length:', response.length);
        console.log('- Response preview:', response.substring(0, 150) + '...');
        
        return {
          response: response,
          persona: helpType,
          language: language,
          timestamp: Date.now()
        };
        
      } catch (error: any) {
        console.error('‚ùå Error in /api/advice endpoint:', error);
        
        return reply.status(500).send({
          error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞",
          details: error.message
        });
      }
    }
  );

  fastify.get("/health", async () => ({ ok: true }));

  console.log("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8787...");

  try {
    await fastify.listen({ port: 8787, host: "0.0.0.0" });
    console.log("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8787!");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:", err);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
console.log("–ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫...");
startServer().catch(err => {
  console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:", err);
  process.exit(1);
});
