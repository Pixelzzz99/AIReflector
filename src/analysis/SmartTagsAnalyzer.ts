// –°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ–≥–æ–≤
export class SmartTagsAnalyzer {
  private tagPatterns: Record<string, { keywords: string[]; patterns: RegExp[] }> = {
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    "—ç–º–æ—Ü–∏–∏-–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ": {
      keywords: ["–≥—Ä—É—Å—Ç–Ω–æ", "—Ç—Ä–µ–≤–æ–≥–∞", "—Å—Ç—Ä–∞—Ö", "–∑–ª–æ—Å—Ç—å", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "stress", "anxiety", "sad", "angry", "fear"],
      patterns: [/\b(—Ä–∞—Å—Å—Ç—Ä–æ–µ|–∑–ª–æ—Å—Ç—å|—Å—Ç—Ä–∞—Ö|—Ç—Ä–µ–≤–æ–∂|–≥—Ä—É—Å—Ç—å|–¥–µ–ø—Ä–µ—Å—Å)\w*/gi, /\b(stress|anxiety|sad|angry|fear)\w*/gi]
    },
    "—ç–º–æ—Ü–∏–∏-–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ": {
      keywords: ["—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–≤–æ—Å—Ç–æ—Ä–≥", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "happy", "joy", "excited", "inspired"],
      patterns: [/\b(—Ä–∞–¥|—Å—á–∞—Å—Ç–ª–∏–≤|–≤–æ—Å—Ç–æ—Ä–≥|–≤–¥–æ—Ö–Ω–æ–≤|–º–æ—Ç–∏–≤–∏—Ä–æ–≤)\w*/gi, /\b(happy|joy|excited|inspired)\w*/gi]
    },
    
    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
    "–∫–∞—Ä—å–µ—Ä–∞": {
      keywords: ["—Ä–∞–±–æ—Ç–∞", "–∫–∞—Ä—å–µ—Ä–∞", "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ø–æ–≤—ã—à–µ–Ω–∏–µ", "–ø—Ä–æ–µ–∫—Ç", "career", "job", "promotion", "salary"],
      patterns: [/\b(—Ä–∞–±–æ—Ç|–∫–∞—Ä—å–µ—Ä|—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω|–∑–∞—Ä–ø–ª–∞—Ç|–ø–æ–≤—ã—à–µ–Ω|–ø—Ä–æ–µ–∫—Ç)\w*/gi, /\b(career|job|promotion|salary|interview)\w*/gi]
    },
    "–æ–±—É—á–µ–Ω–∏–µ": {
      keywords: ["–∏–∑—É—á–∞—é", "—É—á—É—Å—å", "–∫—É—Ä—Å", "–∫–Ω–∏–≥–∞", "–Ω–∞–≤—ã–∫", "–∑–Ω–∞–Ω–∏—è", "learning", "study", "skill", "knowledge"],
      patterns: [/\b(–∏–∑—É—á–∞|—É—á—É|–∫—É—Ä—Å|–∫–Ω–∏–≥|–Ω–∞–≤—ã–∫|–∑–Ω–∞–Ω)\w*/gi, /\b(learn|study|skill|knowledge|course)\w*/gi]
    },
    
    // –û—Ç–Ω–æ—à–µ–Ω–∏—è
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è-–ª–∏—á–Ω—ã–µ": {
      keywords: ["–¥–µ–≤—É—à–∫–∞", "–ø–∞—Ä–µ–Ω—å", "—Å–µ–º—å—è", "—Ä–æ–¥–∏—Ç–µ–ª–∏", "–¥—Ä—É–∑—å—è", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è", "family", "relationship", "friends"],
      patterns: [/\b(–¥–µ–≤—É—à–∫|–ø–∞—Ä–µ–Ω|—Å–µ–º—å|—Ä–æ–¥–∏—Ç–µ–ª|–¥—Ä—É–∑|–æ—Ç–Ω–æ—à–µ–Ω)\w*/gi, /\b(family|relationship|friends|partner)\w*/gi]
    },
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è-–∫–æ–Ω—Ñ–ª–∏–∫—Ç": {
      keywords: ["—Å—Å–æ—Ä–∞", "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "—Å–ø–æ—Ä", "—Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è", "–Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "conflict", "argument", "dispute"],
      patterns: [/\b(—Å—Å–æ—Ä|–∫–æ–Ω—Ñ–ª–∏–∫—Ç|—Å–ø–æ—Ä|—Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏|–Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞)\w*/gi, /\b(conflict|argument|dispute|fight)\w*/gi]
    },
    
    // –ë–∏–∑–Ω–µ—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã
    "–±–∏–∑–Ω–µ—Å": {
      keywords: ["–±–∏–∑–Ω–µ—Å", "–¥–µ–Ω—å–≥–∏", "–¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å", "—Å—Ç–∞—Ä—Ç–∞–ø", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "business", "money", "profit", "startup"],
      patterns: [/\b(–±–∏–∑–Ω–µ—Å|–¥–µ–Ω–µ–≥|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª|—Å—Ç–∞—Ä—Ç–∞–ø|–∏–Ω–≤–µ—Å—Ç–∏—Ü)\w*/gi, /\b(business|money|profit|startup|investment)\w*/gi]
    },
    "–ø—Ä–æ–¥–∞–∂–∏": {
      keywords: ["–ø—Ä–æ–¥–∞–∂–∏", "–∫–ª–∏–µ–Ω—Ç—ã", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ä–µ–∫–ª–∞–º–∞", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "sales", "marketing", "clients", "advertising"],
      patterns: [/\b(–ø—Ä–æ–¥–∞–∂|–∫–ª–∏–µ–Ω—Ç|–º–∞—Ä–∫–µ—Ç–∏–Ω–≥|—Ä–µ–∫–ª–∞–º|–ø–µ—Ä–µ–≥–æ–≤–æ—Ä)\w*/gi, /\b(sales|marketing|clients|advertising|negotiation)\w*/gi]
    },
    
    // –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç
    "–∑–¥–æ—Ä–æ–≤—å–µ": {
      keywords: ["–∑–¥–æ—Ä–æ–≤—å–µ", "–±–æ–ª–µ–∑–Ω—å", "–≤—Ä–∞—á", "–ª–µ—á–µ–Ω–∏–µ", "—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ", "health", "doctor", "treatment", "wellness"],
      patterns: [/\b(–∑–¥–æ—Ä–æ–≤|–±–æ–ª–µ–∑–Ω|–≤—Ä–∞—á|–ª–µ—á–µ–Ω|—Å–∞–º–æ—á—É–≤—Å—Ç–≤)\w*/gi, /\b(health|doctor|treatment|wellness|medical)\w*/gi]
    },
    "—Å–ø–æ—Ä—Ç": {
      keywords: ["—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "—Ñ–∏—Ç–Ω–µ—Å", "–±–µ–≥", "–∑–∞–ª", "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "sport", "training", "fitness", "workout"],
      patterns: [/\b(—Å–ø–æ—Ä—Ç|—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫|—Ñ–∏—Ç–Ω–µ—Å|–±–µ–≥|–∑–∞–ª|—É–ø—Ä–∞–∂–Ω–µ–Ω)\w*/gi, /\b(sport|training|fitness|workout|exercise)\w*/gi]
    },
    
    // –¶–µ–ª–∏ –∏ –ø–ª–∞–Ω—ã
    "—Ü–µ–ª–∏": {
      keywords: ["—Ü–µ–ª—å", "–ø–ª–∞–Ω", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "–º–µ—á—Ç–∞", "–∞–º–±–∏—Ü–∏–∏", "goal", "plan", "achievement", "dream", "ambition"],
      patterns: [/\b(—Ü–µ–ª|–ø–ª–∞–Ω|–¥–æ—Å—Ç–∏–∂–µ–Ω|–º–µ—á—Ç|–∞–º–±–∏—Ü)\w*/gi, /\b(goal|plan|achievement|dream|ambition)\w*/gi]
    },
    "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": {
      keywords: ["–ø–ª–∞–Ω–∏—Ä—É—é", "–∑–∞–¥–∞—á–∞", "—Å–ø–∏—Å–æ–∫", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–¥–µ–¥–ª–∞–π–Ω", "planning", "task", "priority", "deadline"],
      patterns: [/\b(–ø–ª–∞–Ω–∏—Ä—É|–∑–∞–¥–∞—á|—Å–ø–∏—Å–æ–∫|–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–¥–µ–¥–ª–∞–π–Ω)\w*/gi, /\b(planning|task|priority|deadline|schedule)\w*/gi]
    },
    
    // –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç
    "—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ": {
      keywords: ["—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ä–æ—Å—Ç", "—É–ª—É—á—à–µ–Ω–∏–µ", "–ø—Ä–æ–≥—Ä–µ—Å—Å", "—Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "development", "growth", "improvement", "progress"],
      patterns: [/\b(—Ä–∞–∑–≤–∏—Ç–∏|—Ä–æ—Å—Ç|—É–ª—É—á—à–µ–Ω|–ø—Ä–æ–≥—Ä–µ—Å—Å|—Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω)\w*/gi, /\b(development|growth|improvement|progress|self-improvement)\w*/gi]
    },
    "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è": {
      keywords: ["–¥—É–º–∞—é", "—Ä–∞–∑–º—ã—à–ª—è—é", "–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é", "–ø–æ–Ω–∏–º–∞—é", "–æ—Å–æ–∑–Ω–∞—é", "thinking", "reflecting", "analyzing", "understanding"],
      patterns: [/\b(–¥—É–º–∞|—Ä–∞–∑–º—ã—à–ª—è|–∞–Ω–∞–ª–∏–∑–∏—Ä—É|–ø–æ–Ω–∏–º–∞|–æ—Å–æ–∑–Ω–∞)\w*/gi, /\b(thinking|reflecting|analyzing|understanding|realizing)\w*/gi]
    },
    
    // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": {
      keywords: ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "api", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–∞–ª–≥–æ—Ä–∏—Ç–º", "programming", "development", "coding"],
      patterns: [/\b(–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤|—Ä–∞–∑—Ä–∞–±–æ—Ç–∫|api|–±–∞–∑|–∞–ª–≥–æ—Ä–∏—Ç–º)\w*/gi, /\b(programming|development|coding|api|database|algorithm)\w*/gi]
    },
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": {
      keywords: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Å–æ—Ñ—Ç", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å–∏—Å—Ç–µ–º–∞", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "technology", "software", "application", "system"],
      patterns: [/\b(—Ç–µ—Ö–Ω–æ–ª–æ–≥|—Å–æ—Ñ—Ç|–ø—Ä–∏–ª–æ–∂–µ–Ω|—Å–∏—Å—Ç–µ–º|–ø–ª–∞—Ç—Ñ–æ—Ä–º)\w*/gi, /\b(technology|software|application|system|platform)\w*/gi]
    }
  };

  // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
  analyzeTags(content: string): string[] {
    const suggestedTags: Set<string> = new Set();
    const lowerContent = content.toLowerCase();
    
    console.log('üè∑Ô∏è Smart Tags Analysis:');
    console.log('- Content length:', content.length);
    console.log('- Content preview:', content.substring(0, 150) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤
    Object.entries(this.tagPatterns).forEach(([tag, config]) => {
      let score = 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      config.keywords.forEach(keyword => {
        if (lowerContent.includes(keyword.toLowerCase())) {
          score += 2;
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      config.patterns.forEach(pattern => {
        const matches = content.match(pattern);
        if (matches) {
          score += matches.length;
        }
      });
      
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
      if (score > 0) {
        suggestedTags.add(tag);
        console.log(`- Tag "${tag}" scored: ${score}`);
      }
    });
    
    console.log('- Suggested tags:', Array.from(suggestedTags));
    return Array.from(suggestedTags);
  }
  
  // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
  analyzeEmotionalTone(content: string): { tone: string; confidence: number; details: string[] } {
    const emotions = {
      positive: {
        patterns: [/\b(—Ö–æ—Ä–æ—à–æ|–æ—Ç–ª–∏—á–Ω–æ|—Ä–∞–¥|—Å—á–∞—Å—Ç–ª–∏–≤|–¥–æ–≤–æ–ª–µ–Ω|–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω|–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω|—É—Å–ø–µ—à–Ω–æ|–ø–æ–ª—É—á–∏–ª–æ—Å—å)\w*/gi],
        keywords: ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—Ä–∞–¥", "—Å—á–∞—Å—Ç–ª–∏–≤", "–¥–æ–≤–æ–ª–µ–Ω", "–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω", "—É—Å–ø–µ—à–Ω–æ", "–ø–æ–ª—É—á–∏–ª–æ—Å—å"]
      },
      negative: {
        patterns: [/\b(–ø–ª–æ—Ö–æ|—É–∂–∞—Å–Ω–æ|—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω|–∑–ª–æ–π|–≥—Ä—É—Å—Ç–Ω–æ|–¥–µ–ø—Ä–µ—Å—Å–∏—è|—Ç—Ä–µ–≤–æ–≥–∞|–ø—Ä–æ–≤–∞–ª|–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è)\w*/gi],
        keywords: ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω", "–∑–ª–æ–π", "–≥—Ä—É—Å—Ç–Ω–æ", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Ç—Ä–µ–≤–æ–≥–∞", "–ø—Ä–æ–≤–∞–ª", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"]
      },
      neutral: {
        patterns: [/\b(–Ω–æ—Ä–º–∞–ª—å–Ω–æ|–æ–±—ã—á–Ω–æ|–∫–∞–∫ –≤—Å–µ–≥–¥–∞|—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ|–ø—Ä–∏–≤—ã—á–Ω–æ)\w*/gi],
        keywords: ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ", "–æ–±—ã—á–Ω–æ", "–∫–∞–∫ –≤—Å–µ–≥–¥–∞", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ", "–ø—Ä–∏–≤—ã—á–Ω–æ"]
      }
    };
    
    let maxScore = 0;
    let dominantTone = 'neutral';
    const details: string[] = [];
    
    Object.entries(emotions).forEach(([tone, config]) => {
      let score = 0;
      const foundWords: string[] = [];
      
      config.patterns.forEach(pattern => {
        const matches = content.match(pattern);
        if (matches) {
          score += matches.length;
          foundWords.push(...matches);
        }
      });
      
      if (score > maxScore) {
        maxScore = score;
        dominantTone = tone;
      }
      
      if (foundWords.length > 0) {
        details.push(`${tone}: ${foundWords.slice(0, 3).join(', ')}`);
      }
    });
    
    const confidence = Math.min(maxScore / (content.split(' ').length / 10), 1);
    
    console.log('üé≠ Emotional Analysis:');
    console.log('- Dominant tone:', dominantTone);
    console.log('- Confidence:', confidence.toFixed(2));
    console.log('- Details:', details);
    
    return {
      tone: dominantTone,
      confidence: confidence,
      details: details
    };
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
  extractKeyConcepts(content: string): string[] {
    const concepts: string[] = [];
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
    const conceptPatterns = [
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
      /\b[A-Z]{2,}\b/g, // –ê–∫—Ä–æ–Ω–∏–º—ã (API, SQL, etc)
      /\b\w+(?:Script|Lang|Framework|Library)\b/gi, // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      
      // –í–∞–∂–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ (–±–æ–ª–µ–µ 6 –±—É–∫–≤)
      /\b[–ê-–Ø–Å][–∞-—è—ë]{5,}\b/g,
      /\b[A-Z][a-z]{5,}\b/g,
      
      // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
      /\d+\s*(?:–ª–µ—Ç|–º–µ—Å—è—Ü|–¥–µ–Ω—å|—á–∞—Å|–º–∏–Ω—É—Ç|—Ä—É–±–ª|–¥–æ–ª–ª–∞—Ä|–ø—Ä–æ—Ü–µ–Ω—Ç|%)/gi
    ];
    
    conceptPatterns.forEach(pattern => {
      const matches = content.match(pattern);
      if (matches) {
        concepts.push(...matches.slice(0, 5)); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    const uniqueConcepts = [...new Set(concepts)]
      .filter(concept => concept.length > 3)
      .slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
    
    console.log('üîç Key Concepts:', uniqueConcepts);
    return uniqueConcepts;
  }
  
  // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  analyzeContent(content: string): {
    suggestedTags: string[];
    emotionalTone: { tone: string; confidence: number; details: string[] };
    keyConcepts: string[];
    contentType: string;
  } {
    console.log('üìä Starting comprehensive content analysis...');
    
    const suggestedTags = this.analyzeTags(content);
    const emotionalTone = this.analyzeEmotionalTone(content);
    const keyConcepts = this.extractKeyConcepts(content);
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let contentType = 'general';
    if (suggestedTags.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || suggestedTags.includes('—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏')) {
      contentType = 'technical';
    } else if (suggestedTags.includes('—ç–º–æ—Ü–∏–∏-–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ') || suggestedTags.includes('—ç–º–æ—Ü–∏–∏-–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ')) {
      contentType = 'emotional';
    } else if (suggestedTags.includes('–±–∏–∑–Ω–µ—Å') || suggestedTags.includes('–ø—Ä–æ–¥–∞–∂–∏')) {
      contentType = 'business';
    } else if (suggestedTags.includes('—Ü–µ–ª–∏') || suggestedTags.includes('–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')) {
      contentType = 'planning';
    }
    
    console.log('‚úÖ Analysis completed:');
    console.log('- Content type:', contentType);
    console.log('- Tags count:', suggestedTags.length);
    console.log('- Concepts count:', keyConcepts.length);
    
    return {
      suggestedTags,
      emotionalTone,
      keyConcepts,
      contentType
    };
  }
}
