// –°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
import { App, TFile, TAbstractFile } from 'obsidian';

export class SmartConnectionsAnalyzer {
  private app: App;
  private cache: Map<string, { content: string; embeddings?: number[]; lastModified: number }> = new Map();
  private connections: Map<string, { file: string; similarity: number; reasons: string[] }[]> = new Map();

  constructor(app: App) {
    this.app = app;
  }

  // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (TF-IDF –ø–æ–¥–æ–±–Ω—ã–π)
  private calculateTextEmbedding(text: string): number[] {
    console.log('üß† Calculating text embedding for:', text.substring(0, 100));
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    const words = text.toLowerCase()
      .replace(/[^\w\s\u0400-\u04FF]/g, ' ') // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–≤–∫–ª—é—á–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
      .split(/\s+/)
      .filter(word => word.length > 2); // –£–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    const vocabulary = [...new Set(words)];
    const wordFreq: Record<string, number> = {};
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤
    words.forEach(word => {
      wordFreq[word] = (wordFreq[word] || 0) + 1;
    });
    
    // –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç
    const embedding = vocabulary.map(word => {
      const freq = wordFreq[word] || 0;
      // TF-IDF —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: —á–∞—Å—Ç–æ—Ç–∞ * –ª–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
      return freq * Math.log(words.length / (freq + 1));
    });
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
    const magnitude = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));
    const normalizedEmbedding = magnitude > 0 ? embedding.map(val => val / magnitude) : embedding;
    
    console.log('- Vocabulary size:', vocabulary.length);
    console.log('- Embedding dimension:', normalizedEmbedding.length);
    
    return normalizedEmbedding;
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏
  private calculateCosineSimilarity(embedding1: number[], embedding2: number[]): number {
    if (embedding1.length !== embedding2.length) {
      console.warn('‚ö†Ô∏è Embedding dimensions mismatch:', embedding1.length, 'vs', embedding2.length);
      return 0;
    }
    
    let dotProduct = 0;
    let magnitude1 = 0;
    let magnitude2 = 0;
    
    for (let i = 0; i < embedding1.length; i++) {
      dotProduct += embedding1[i] * embedding2[i];
      magnitude1 += embedding1[i] * embedding1[i];
      magnitude2 += embedding2[i] * embedding2[i];
    }
    
    magnitude1 = Math.sqrt(magnitude1);
    magnitude2 = Math.sqrt(magnitude2);
    
    if (magnitude1 === 0 || magnitude2 === 0) {
      return 0;
    }
    
    return dotProduct / (magnitude1 * magnitude2);
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
  private extractKeyPhrases(text: string): string[] {
    const phrases: string[] = [];
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ—Ä–∞–∑
    const patterns = [
      // –§—Ä–∞–∑—ã –∏–∑ 2-3 —Å–ª–æ–≤
      /\b[–∞-—è—ë]+\s+[–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)?\b/gi,
      /\b[a-z]+\s+[a-z]+(?:\s+[a-z]+)?\b/gi,
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
      /\b[A-Z][a-z]+(?:[A-Z][a-z]+)*\b/g,
      /\b\w+(?:API|SDK|DB|UI|UX)\b/gi,
      
      // –î–∞—Ç—ã –∏ —á–∏—Å–ª–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      /\d{1,2}\s*(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s*\d{2,4}/gi,
      /\d+\s*(?:–ª–µ—Ç|–º–µ—Å—è—Ü|–¥–µ–Ω—å|—á–∞—Å|–º–∏–Ω—É—Ç|—Å–µ–∫—É–Ω–¥)/gi
    ];
    
    patterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        phrases.push(...matches.slice(0, 10)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
    const uniquePhrases = [...new Set(phrases)]
      .filter(phrase => phrase.length > 5 && phrase.trim().split(' ').length <= 4)
      .slice(0, 20);
    
    console.log('üìù Extracted key phrases:', uniquePhrases.slice(0, 5));
    return uniquePhrases;
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
  private analyzeContentSimilarity(content1: string, content2: string): { similarity: number; reasons: string[] } {
    const embedding1 = this.calculateTextEmbedding(content1);
    const embedding2 = this.calculateTextEmbedding(content2);
    
    const similarity = this.calculateCosineSimilarity(embedding1, embedding2);
    const reasons: string[] = [];
    
    // –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
    const phrases1 = this.extractKeyPhrases(content1);
    const phrases2 = this.extractKeyPhrases(content2);
    
    const commonPhrases = phrases1.filter(phrase => 
      phrases2.some(p2 => p2.toLowerCase().includes(phrase.toLowerCase()) || 
                         phrase.toLowerCase().includes(p2.toLowerCase()))
    );
    
    if (commonPhrases.length > 0) {
      reasons.push(`–û–±—â–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: ${commonPhrases.slice(0, 3).join(', ')}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Å–ª–æ–≤ (–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö)
    const words1 = content1.toLowerCase().split(/\s+/).filter(w => w.length > 4);
    const words2 = content2.toLowerCase().split(/\s+/).filter(w => w.length > 4);
    const commonWords = words1.filter(word => words2.includes(word));
    
    if (commonWords.length > 2) {
      reasons.push(`–û–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: ${[...new Set(commonWords)].slice(0, 3).join(', ')}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
    const headers1 = content1.match(/^#{1,6}\s+.+$/gm) || [];
    const headers2 = content2.match(/^#{1,6}\s+.+$/gm) || [];
    
    if (headers1.length > 0 && headers2.length > 0) {
      const commonHeaderWords = headers1.some(h1 => 
        headers2.some(h2 => {
          const words1 = h1.toLowerCase().split(/\s+/);
          const words2 = h2.toLowerCase().split(/\s+/);
          return words1.some(w => words2.includes(w) && w.length > 3);
        })
      );
      
      if (commonHeaderWords) {
        reasons.push('–ü–æ—Ö–æ–∂–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤');
      }
    }
    
    return { similarity, reasons };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  private async getAllNotes(): Promise<TFile[]> {
    const files = this.app.vault.getMarkdownFiles();
    console.log(`üìö Found ${files.length} markdown files in vault`);
    return files;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è —Ñ–∞–π–ª–∞
  private async updateCache(file: TFile): Promise<void> {
    try {
      const content = await this.app.vault.read(file);
      const stat = await this.app.vault.adapter.stat(file.path);
      
      this.cache.set(file.path, {
        content: content,
        embeddings: this.calculateTextEmbedding(content),
        lastModified: stat?.mtime || Date.now()
      });
      
      console.log(`üíæ Updated cache for: ${file.path}`);
    } catch (error) {
      console.error('‚ùå Error updating cache for file:', file.path, error);
    }
  }

  // –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
  async findConnectedNotes(sourceFile: TFile, maxResults: number = 5, minSimilarity: number = 0.1): Promise<{ file: TFile; similarity: number; reasons: string[] }[]> {
    console.log(`üîç Finding connections for: ${sourceFile.path}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    await this.updateCache(sourceFile);
    const sourceCache = this.cache.get(sourceFile.path);
    
    if (!sourceCache) {
      console.warn('‚ö†Ô∏è No cache found for source file');
      return [];
    }
    
    const allNotes = await this.getAllNotes();
    const connections: { file: TFile; similarity: number; reasons: string[] }[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    for (const targetFile of allNotes) {
      if (targetFile.path === sourceFile.path) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      let targetCache = this.cache.get(targetFile.path);
      if (!targetCache) {
        await this.updateCache(targetFile);
        targetCache = this.cache.get(targetFile.path);
      }
      
      if (!targetCache) continue;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
      const analysis = this.analyzeContentSimilarity(sourceCache.content, targetCache.content);
      
      if (analysis.similarity > minSimilarity) {
        connections.push({
          file: targetFile,
          similarity: analysis.similarity,
          reasons: analysis.reasons
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const sortedConnections = connections
      .sort((a, b) => b.similarity - a.similarity)
      .slice(0, maxResults);
    
    console.log(`‚úÖ Found ${sortedConnections.length} connections above threshold ${minSimilarity}`);
    sortedConnections.forEach(conn => {
      console.log(`- ${conn.file.basename}: ${(conn.similarity * 100).toFixed(1)}% (${conn.reasons.join(', ')})`);
    });
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.connections.set(sourceFile.path, sortedConnections.map(conn => ({
      file: conn.file.path,
      similarity: conn.similarity,
      reasons: conn.reasons
    })));
    
    return sortedConnections;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
  async getSuggestions(content: string, maxResults: number = 3): Promise<{ file: TFile; similarity: number; reasons: string[] }[]> {
    console.log('üí° Getting connection suggestions for new content...');
    
    const allNotes = await this.getAllNotes();
    const suggestions: { file: TFile; similarity: number; reasons: string[] }[] = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const file of allNotes.slice(0, 50)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      let fileCache = this.cache.get(file.path);
      if (!fileCache) {
        await this.updateCache(file);
        fileCache = this.cache.get(file.path);
      }
      
      if (!fileCache) continue;
      
      const analysis = this.analyzeContentSimilarity(content, fileCache.content);
      
      if (analysis.similarity > 0.05) { // –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        suggestions.push({
          file: file,
          similarity: analysis.similarity,
          reasons: analysis.reasons
        });
      }
    }
    
    const topSuggestions = suggestions
      .sort((a, b) => b.similarity - a.similarity)
      .slice(0, maxResults);
    
    console.log(`üí° Generated ${topSuggestions.length} suggestions`);
    return topSuggestions;
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
  async findNoteClusters(minClusterSize: number = 3): Promise<{ topic: string; files: TFile[]; connections: number }[]> {
    console.log('üéØ Analyzing note clusters...');
    
    const allNotes = await this.getAllNotes();
    const clusters: { topic: string; files: TFile[]; connections: number }[] = [];
    const processed = new Set<string>();
    
    for (const file of allNotes) {
      if (processed.has(file.path)) continue;
      
      const connections = await this.findConnectedNotes(file, 10, 0.2);
      const clusterFiles = [file, ...connections.map(c => c.file)];
      
      if (clusterFiles.length >= minClusterSize) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∫–ª–∞—Å—Ç–µ—Ä–∞
        const allContent = clusterFiles.map(f => this.cache.get(f.path)?.content || '').join(' ');
        const keyPhrases = this.extractKeyPhrases(allContent);
        const topic = keyPhrases[0] || file.basename;
        
        clusters.push({
          topic: topic,
          files: clusterFiles,
          connections: connections.length
        });
        
        // –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        clusterFiles.forEach(f => processed.add(f.path));
      }
    }
    
    console.log(`üéØ Found ${clusters.length} clusters`);
    return clusters.sort((a, b) => b.connections - a.connections);
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCache(): void {
    this.cache.clear();
    this.connections.clear();
    console.log('üóëÔ∏è Cache cleared');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats(): { cacheSize: number; connectionsCount: number; totalFiles: number } {
    return {
      cacheSize: this.cache.size,
      connectionsCount: this.connections.size,
      totalFiles: this.app.vault.getMarkdownFiles().length
    };
  }
}
