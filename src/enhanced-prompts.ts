// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
export function detectHelpType(content: string): 'mentor' | 'coach' | 'psychologist' | 'business' | 'reflection' {
  const lowerContent = content.toLowerCase();
  
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–º–æ—â–∏
  const keywords = {
    business: ['–±–∏–∑–Ω–µ—Å', '–¥–µ–Ω—å–≥–∏', '–ø—Ä–æ–¥–∞–∂–∏', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Å—Ç–∞—Ä—Ç–∞–ø', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ø—Ä–∏–±—ã–ª—å', '–∫–ª–∏–µ–Ω—Ç—ã', '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', '–ø–æ—Å—Ç–∞–≤—â–∏–∫', 'business', 'money', 'sales', 'marketing', 'startup', 'profit', 'client'],
    psychologist: ['–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–µ–≤–æ–≥–∞', '—Å—Ç—Ä–µ—Å—Å', '—ç–º–æ—Ü–∏–∏', '—á—É–≤—Å—Ç–≤–∞', '—Å–µ–º—å—è', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–≥—Ä—É—Å—Ç—å', '–∑–ª–æ—Å—Ç—å', '—Å—Ç—Ä–∞—Ö', 'depression', 'anxiety', 'stress', 'emotion', 'family', 'relationship'],
    coach: ['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Å–ø–æ—Ä—Ç', '—Ü–µ–ª—å', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '–ø—Ä–∏–≤—ã—á–∫–∞', '–ø–ª–∞–Ω', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '—Ñ–∏—Ç–Ω–µ—Å', 'workout', 'sport', 'goal', 'motivation', 'habit', 'achievement', 'progress'],
    mentor: ['–∫–∞—Ä—å–µ—Ä–∞', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–æ–±—É—á–µ–Ω–∏–µ', '–Ω–∞–≤—ã–∫', '–∑–Ω–∞–Ω–∏—è', '—É—á–µ–±–∞', '–æ–ø—ã—Ç', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'career', 'development', 'learning', 'skill', 'study', 'programming', 'technology']
  };
  
  let maxScore = 0;
  let detectedType: 'mentor' | 'coach' | 'psychologist' | 'business' | 'reflection' = 'reflection';
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  Object.entries(keywords).forEach(([type, words]) => {
    const score = words.reduce((count, word) => {
      const regex = new RegExp(`\\b${word}\\b`, 'gi');
      return count + (lowerContent.match(regex) || []).length;
    }, 0);
    
    if (score > maxScore) {
      maxScore = score;
      detectedType = type as any;
    }
  });
  
  console.log('üéØ Help type detection:');
  console.log('- Content preview:', content.substring(0, 100) + '...');
  console.log('- Detected type:', detectedType);
  console.log('- Max score:', maxScore);
  
  return detectedType;
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
function detectLanguage(text: string): 'ru' | 'en' {
  console.log('üîç Language Detection Start:');
  console.log('Original text:', text.substring(0, 200) + '...');
  console.log('Original text length:', text.length);
  
  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const cleanText = text.replace(/[^a-zA-Z–∞-—è—ë–ê-–Ø–Å\s]/g, ' ');
  console.log('Cleaned text:', cleanText.substring(0, 200) + '...');
  console.log('Cleaned text length:', cleanText.length);
  
  const cyrillicChars = cleanText.match(/[–∞-—è—ë–ê-–Ø–Å]/g);
  const latinChars = cleanText.match(/[a-zA-Z]/g);
  
  console.log('Cyrillic characters found:', cyrillicChars?.length || 0);
  console.log('Cyrillic sample:', cyrillicChars?.slice(0, 10).join('') || 'none');
  console.log('Latin characters found:', latinChars?.length || 0);
  console.log('Latin sample:', latinChars?.slice(0, 10).join('') || 'none');

  if (!cyrillicChars && !latinChars) {
    console.log('‚ùå No letters found, defaulting to Russian');
    return 'ru';
  }
  
  if (!cyrillicChars) {
    console.log('‚úÖ Only Latin letters found, detected: English');
    return 'en';
  }
  
  if (!latinChars) {
    console.log('‚úÖ Only Cyrillic letters found, detected: Russian');
    return 'ru';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é
  const totalChars = cyrillicChars.length + latinChars.length;
  const cyrillicPercent = (cyrillicChars.length / totalChars) * 100;
  
  console.log('üìä Language Statistics:');
  console.log('- Total letters:', totalChars);
  console.log('- Cyrillic count:', cyrillicChars.length);
  console.log('- Latin count:', latinChars.length);
  console.log('- Cyrillic percentage:', cyrillicPercent.toFixed(1) + '%');
  
  const detectedLanguage = cyrillicPercent >= 40 ? 'ru' : 'en';
  console.log('‚úÖ Final decision:', detectedLanguage, `(threshold: 40%, actual: ${cyrillicPercent.toFixed(1)}%)`);
  
  return detectedLanguage;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–º–æ—â–∏
const HELP_PROMPTS = {
  ru: {
    mentor: {
      systemSuffix: "–í—ã –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏. –î–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏. –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∑–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
      userTemplate: `–ö–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç—É –∑–∞–º–µ—Ç–∫—É –∏ –¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

üìö **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):**

üéØ **–ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è (3-5 —à–∞–≥–æ–≤):**

üõ†Ô∏è **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**

‚ùì **–í–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:**

–ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ó–∞–º–µ—Ç–∫–∞: {noteTitle}
- –ü—É—Ç—å: {notePath}
- –¢–µ–≥–∏: {tags}
- –¶–µ–ª–∏: {goals}

–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:
{noteContent}`
    },
    coach: {
      systemSuffix: "–í—ã –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç—Ä–µ–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏. –§–æ–∫—É—Å–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∑–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
      userTemplate: `–ö–∞–∫ –≤–∞—à –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä, –¥–∞—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:

üí™ **–ß—Ç–æ –≤—ã —É–∂–µ —Ö–æ—Ä–æ—à–æ –¥–µ–ª–∞–µ—Ç–µ:**

üéØ **–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞:**
1. 
2. 
3. 

‚è∞ **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:**

üèÜ **–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**

üî• **–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:**

–î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏: {noteTitle} | {tags} | {goals}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:
{noteContent}`
    },
    psychologist: {
      systemSuffix: "–í—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —ç–º–æ—Ü–∏–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. –°–æ–∑–¥–∞–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∑–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
      userTemplate: `–ö–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥, –ø–æ–º–æ–≥–∞—é –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:

üß† **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**

üí° **–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:**

üå± **–†–µ—Å—É—Ä—Å—ã –¥–ª—è —Ä–æ—Å—Ç–∞:**

ü§ù **–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∏:**

üîç **–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:**

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {noteTitle} –≤ {notePath}
–¢–µ–≥–∏: {tags} | –§–æ–∫—É—Å: {goals}

–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{noteContent}`
    },
    business: {
      systemSuffix: "–í—ã –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –î–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∑–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
      userTemplate: `–ö–∞–∫ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:

üíº **–ë–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã:**

üìà **–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**
- –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ (1-2 –Ω–µ–¥–µ–ª–∏):
- –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ (1-3 –º–µ—Å—è—Ü–∞):

üí∞ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**

‚ö†Ô∏è **–†–∏—Å–∫–∏ –∏ –º–∏—Ç–∏–≥–∞—Ü–∏—è:**

ü§î **–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:**

–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç: {noteTitle}
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {tags} | –¶–µ–ª–∏: {goals}

–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{noteContent}`
    },
    reflection: {
      systemSuffix: "–í—ã –º—É–¥—Ä—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–∏—Ç—É–∞—Ü–∏–∏. –ó–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∑–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
      userTemplate: `–ü–æ–º–æ–≥–∞—é –≤–∞–º –≤ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:

ü§î **–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —ç—Ç–∞ –∑–∞–º–µ—Ç–∫–∞ –æ –≤–∞—Å:**

üîÑ **–°–≤—è–∑–∏ –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏:**

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞:**

üìù **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**

‚ùì **–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:**

–î–µ—Ç–∞–ª–∏: {noteTitle} | {notePath} | {tags}
–í–∞—à —Ñ–æ–∫—É—Å: {goals}

–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:
{noteContent}`
    }
  },
  en: {
    mentor: {
      systemSuffix: "You are an experienced mentor with years of expertise in professional development. You share practical advice and help develop skills. IMPORTANT: Always respond in the same language as the user's note content.",
      userTemplate: `As your experienced mentor, let me analyze this note and provide professional recommendations:

üìö **Key Insights (2 sentences):**

üéØ **Development Plan (3-5 steps):**

üõ†Ô∏è **Practical Skills to Study:**

‚ùì **Question for Reflection:**

Meta-information:
- Note: {noteTitle}
- Path: {notePath}
- Tags: {tags}
- Goals: {goals}

Note content:
{noteContent}`
    },
    coach: {
      systemSuffix: "You are a motivating coach who helps achieve goals and build beneficial habits. You focus on actions and results. IMPORTANT: Always respond in the same language as the user's note content.",
      userTemplate: `As your personal coach, providing motivating feedback:

üí™ **What you're already doing well:**

üéØ **Action plan for tomorrow:**
1. 
2. 
3. 

‚è∞ **Specific timeframes:**

üèÜ **Success criteria:**

üî• **Motivational question:**

Note data: {noteTitle} | {tags} | {goals}

Material to analyze:
{noteContent}`
    },
    psychologist: {
      systemSuffix: "You are an empathetic psychologist who helps understand emotions, behavioral patterns, and internal processes. You create a safe space for reflection. IMPORTANT: Always respond in the same language as the user's note content.",
      userTemplate: `As a psychologist, helping you understand internal processes:

üß† **Emotional Analysis:**

üí° **Behavioral Patterns:**

üå± **Resources for Growth:**

ü§ù **Self-Support Techniques:**

üîç **Exploratory Question:**

Context: {noteTitle} in {notePath}
Tags: {tags} | Focus: {goals}

Material for analysis:
{noteContent}`
    },
    business: {
      systemSuffix: "You are an experienced business consultant with expertise in strategy, sales, and business development. You provide practical commercial advice. IMPORTANT: Always respond in the same language as the user's note content.",
      userTemplate: `As a business consultant, analyzing your situation:

üíº **Business Insights:**

üìà **Strategic Actions:**
- Short-term (1-2 weeks):
- Medium-term (1-3 months):

üí∞ **Potential Opportunities:**

‚ö†Ô∏è **Risks and Mitigation:**

ü§î **Strategic Question:**

Business context: {noteTitle}
Categories: {tags} | Goals: {goals}

Data for analysis:
{noteContent}`
    },
    reflection: {
      systemSuffix: "You are a wise assistant for self-reflection who helps understand yourself and situations more deeply. You ask the right questions. IMPORTANT: Always respond in the same language as the user's note content.",
      userTemplate: `Helping you with self-reflection:

ü§î **What this note reveals about you:**

üîÑ **Connections and Patterns:**

‚ú® **Growth Opportunities:**

üìù **Practical Next Steps:**

‚ùì **Question for Deep Reflection:**

Details: {noteTitle} | {notePath} | {tags}
Your focus: {goals}

Content for reflection:
{noteContent}`
    }
  }
};

export function buildPrompt(args: {
  noteTitle: string;
  notePath: string;
  noteContent: string;
  tags: string[] | string;
  goals: string;
  persona: string;
}) {
  console.log('üî® Building prompt with args:');
  console.log('- Note title:', args.noteTitle);
  console.log('- Note path:', args.notePath);
  console.log('- Note content length:', args.noteContent?.length || 0);
  console.log('- Note content preview:', args.noteContent?.substring(0, 100) + '...');
  console.log('- Goals:', args.goals);
  console.log('- Persona:', args.persona);

  const tags = Array.isArray(args.tags)
    ? args.tags.join(", ")
    : String(args.tags || "");
  
  console.log('- Processed tags:', tags);
    
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∑–∞–º–µ—Ç–∫–∏
  const language = detectLanguage(args.noteContent);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–º–æ—â–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
  const helpType = detectHelpType(args.noteContent);
  
  const templates = HELP_PROMPTS[language][helpType];
  
  console.log('üéØ Selected language templates:', language);
  console.log('üéØ Selected help type:', helpType);
  console.log('- System suffix preview:', templates.systemSuffix.substring(0, 100) + '...');
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
  const userPrompt = templates.userTemplate
    .replace('{noteTitle}', args.noteTitle)
    .replace('{notePath}', args.notePath)
    .replace('{tags}', tags)
    .replace('{goals}', args.goals)
    .replace('{noteContent}', args.noteContent);
  
  const result = {
    system: `${args.persona} ${templates.systemSuffix}`,
    user: userPrompt,
  };
  
  console.log('‚úÖ Final prompt built:');
  console.log('- System prompt length:', result.system.length);
  console.log('- User prompt length:', result.user.length);
  console.log('- System prompt preview:', result.system.substring(0, 150) + '...');
  console.log('- User prompt preview:', result.user.substring(0, 200) + '...');
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏
export function getPromptForType(helpType: 'mentor' | 'coach' | 'psychologist' | 'business' | 'reflection', content: string): { system: string; user: string } {
  const language = detectLanguage(content);
  const templates = HELP_PROMPTS[language][helpType];
  
  console.log('üìã Getting prompt for type:', helpType, 'language:', language);
  
  return {
    system: templates.systemSuffix,
    user: templates.userTemplate.replace('{noteContent}', content)
      .replace('{noteTitle}', '–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å')
      .replace('{notePath}', '/')
      .replace('{tags}', '')
      .replace('{goals}', '')
  };
}
